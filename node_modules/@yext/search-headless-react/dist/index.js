"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  SearchHeadlessContext: () => SearchHeadlessContext,
  SearchHeadlessProvider: () => SearchHeadlessProvider,
  useSearchActions: () => useSearchActions,
  useSearchState: () => useSearchState,
  useSearchUtilities: () => useSearchUtilities
});
module.exports = __toCommonJS(src_exports);

// src/useSearchActions.ts
var import_react2 = require("react");

// src/SearchHeadlessContext.ts
var import_react = require("react");
var SearchHeadlessContext = (0, import_react.createContext)({});

// src/useSearchActions.ts
function useSearchActions() {
  const searchHeadless = (0, import_react2.useContext)(SearchHeadlessContext);
  if (searchHeadless.state === void 0) {
    throw new Error("Attempted to call useSearchActions() outside of SearchHeadlessProvider. Please ensure that 'useSearchActions()' is called within an SearchHeadlessProvider component.");
  }
  return searchHeadless;
}

// src/useSearchState.ts
var import_react3 = require("react");
var import_with_selector = require("use-sync-external-store/shim/with-selector.js");
function useSearchState(stateSelector) {
  const search = (0, import_react3.useContext)(SearchHeadlessContext);
  if (search.state === void 0) {
    throw new Error("Attempted to call useSearchState() outside of SearchHeadlessProvider. Please ensure that 'useSearchState()' is called within an SearchHeadlessProvider component.");
  }
  const getSnapshot = (0, import_react3.useCallback)(() => search.state, [search.state]);
  const isMountedRef = (0, import_react3.useRef)(false);
  (0, import_react3.useEffect)(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  const subscribe = (0, import_react3.useCallback)((cb) => search.addListener({
    valueAccessor: (state) => state,
    callback: () => {
      if (!isMountedRef.current) {
        return;
      }
      cb();
    }
  }), [search]);
  const selectedState = (0, import_with_selector.useSyncExternalStoreWithSelector)(
    subscribe,
    getSnapshot,
    getSnapshot,
    stateSelector
  );
  return selectedState;
}

// src/useSearchUtilities.ts
var import_react4 = require("react");
function useSearchUtilities() {
  return (0, import_react4.useContext)(SearchHeadlessContext).utilities;
}

// src/SearchHeadlessProvider.tsx
var import_react5 = __toESM(require("react"));
function SearchHeadlessProvider(props) {
  const { children, searcher } = props;
  return /* @__PURE__ */ import_react5.default.createElement(SearchHeadlessContext.Provider, { value: searcher }, children);
}

// src/index.ts
__reExport(src_exports, require("@yext/search-headless"), module.exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SearchHeadlessContext,
  SearchHeadlessProvider,
  useSearchActions,
  useSearchState,
  useSearchUtilities,
  ...require("@yext/search-headless")
});
//# sourceMappingURL=index.js.map